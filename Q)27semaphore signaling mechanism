#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

#define NUM_INSTANCES 4

sem_t semaphore;

void* process(void* arg) {
    int process_id = *(int*) arg;

    printf("Process P%d is waiting...\n", process_id);
    sem_wait(&semaphore);
    printf("Process P%d has acquired the resource.\n", process_id);

    // Simulating some work
    sleep(2);

    printf("Process P%d is releasing the resource.\n", process_id);
    sem_post(&semaphore);

    pthread_exit(NULL);
}

int main() {
    int i;
    int process_ids[] = {1, 2, 3, 4, 5};
    pthread_t threads[5];

    sem_init(&semaphore, 0, NUM_INSTANCES);

    for (i = 0; i < 4; i++) {
        pthread_create(&threads[i], NULL, process, &process_ids[i]);
    }

    // Wait for the first 4 processes to finish
    for (i = 0; i < 4; i++) {
        pthread_join(threads[i], NULL);
    }

    // Additional process P5 wants the same resource
    printf("Process P5 is waiting...\n");
    sem_wait(&semaphore);
    printf("Process P5 has acquired the resource.\n");

    // Simulating some work
    sleep(2);

    printf("Process P5 is releasing the resource.\n");
    sem_post(&semaphore);

    sem_destroy(&semaphore);

    return 0;
}
